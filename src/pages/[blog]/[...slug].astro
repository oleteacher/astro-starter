---
// Imports
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";
import Base from "@layouts/Base.astro";
import { Image } from "astro:assets";
import { formatDate } from "@utils/utils";
import "@styles/markdown.css";

// Get current language from URL and generate paths for each blog post
export const getStaticPaths = (async () => {
    // Fetch all blog posts and authors
    const posts = await getCollection("blog", (entry) => !entry.data.isDraft);
    const authorsRaw = await getCollection("authors");

    // Define language configurations
    const langConfigs = {
        en: { prefix: "en/", blogPath: "/blog" },
        sl: { prefix: "sl/", blogPath: "/sl/spletni-dnevnik" },
    };

    // Create paths for each post in each language
    const createPath = (post, lang, blogPath) => {
        const author = authorsRaw.find((a) => a.id === post.data.author.id);
        const localizedAuthor = author && {
            ...author,
            data: {
                ...author.data,
                position:
                    author.data.position?.[lang] ??
                    author.data.position?.en ??
                    "",
            },
        };

        return {
            params: { blog: blogPath, slug: post.id.split("/")[1] },
            props: { post, lang, author: localizedAuthor },
        };
    };

    // Generate and return all paths
    return Object.entries(langConfigs).flatMap(([lang, { prefix, blogPath }]) =>
        posts
            .filter((post) => post.id.startsWith(prefix))
            .map((post) => createPath(post, lang, blogPath))
    );
}) satisfies GetStaticPaths;

// Props
const { post, author } = Astro.props;

// Render the MD content of the blog post
const { Content } = await render(post);
---

<Base
    title={post?.data?.title}
    meta={{
        description: post?.data?.description,
        keywords: post?.data?.keywords,
        image: post?.data?.image?.src,
    }}
>
    <section role="main" aria-labelledby="article-title">
        <article
            role="article"
            aria-labelledby="article-title"
            aria-describedby="article-meta"
        >
            <!--Main Article Image-->
            <Image
                src={post?.data?.image}
                alt={post?.data?.imageAlt}
                class="mb-10"
                loading="eager"
                quality={"high"}
                sizes="(min-width: 1024px) 800px, 100vw"
                role="img"
                transition:name={`${post.data.title}-image`}
            />

            <!--Article Title-->
            <h1 id="article-title" class="!text-left">
                {post?.data?.title}
            </h1>

            <div id="article-meta" class="author-time" role="contentinfo">
                <div class="author" role="group">
                    <Image
                        src={author?.data?.image}
                        alt={`${author?.data?.name}`}
                        height={36}
                        width={36}
                        loading="eager"
                        quality={"high"}
                        class="rounded-full"
                        role="img"
                    />
                    <div>
                        <h3>{author?.data?.name}</h3>
                        <p
                            class="position"
                            aria-label={`${author?.data?.position}`}
                        >
                            {author?.data?.position}
                        </p>
                    </div>
                </div>
                <time
                    class="date"
                    datetime={post.data.pubDate.toISOString()}
                    aria-label={`${formatDate(post.data.pubDate)}`}
                >
                    {formatDate(post.data.pubDate)}
                </time>
            </div>

            <!--Markdown Content-->
            <section id="md-content" role="main">
                <Content />
            </section>
        </article>
    </section>
</Base>
